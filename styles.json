{
  "$id": "/Users/aurianaubert/Library/Preferences/Adobe InDesign/Version 18.0/fr_FR/Scripts/Scripts Panel/SCHEMAS/styles.json",
  "title": "Paragraphs and character styles",
  "description": "Paragraphs and character styles",
  "type": "object",
  "definitions": {
    "unit": {
      "anyOf": [
        {
          "type": "number",
          "description": "When set to a number without an unit, the unit used is the one set in the general `document.json` config. If it isn't there, it fallbacks to `um`."
        },
        {
          "type": "string",
          "pattern": "^-?[0-9]+(?:\\.[0-9]+)?(?:pt|mm|cm|in|i|um|)$"
        }
      ]
    },
    "color": {
      "oneOf": [
        {
          "$ref": "#/definitions/id",
          "description": "A color ID if `colors.json` has been imported."
        },
        {
          "type": "object",
          "description": "A color object containing the keys to format a CMYK color.",
          "properties": {
            "C": { "type": "number", "mininum": 0, "maximum": 100 },
            "M": { "type": "number", "mininum": 0, "maximum": 100 },
            "Y": { "type": "number", "mininum": 0, "maximum": 100 },
            "K": { "type": "number", "mininum": 0, "maximum": 100 }
          },
          "required": ["C", "M", "Y", "K"]
        },
        {
          "type": "object",
          "description": "A color object containing the keys to format a RGB color.",
          "properties": {
            "R": { "type": "number", "mininum": 0, "maximum": 255 },
            "G": { "type": "number", "mininum": 0, "maximum": 255 },
            "B": { "type": "number", "mininum": 0, "maximum": 255 }
          },
          "required": ["R", "G", "G"]
        },
        {
          "type": "object",
          "description": "A color object containing the keys to format a LAB color.",
          "properties": {
            "L": { "type": "number", "mininum": 0, "maximum": 255 },
            "A": { "type": "number", "mininum": -128, "maximum": 127 },
            "B": { "type": "number", "mininum": -128, "maximum": 127 }
          },
          "required": ["L", "A", "B"]
        }
      ]
    },
    "id": {
      "type": "string",
      "pattern": "^[a-zA-Z0-9_.-]+$"
    },
    "layout": {
      "corners": {
        "type": "object",
        "properties": {
          "style": {
            "type": "string",
            "enum": [
              "BEVEL_CORNER",
              "FANCY_CORNER",
              "INSET_CORNER",
              "INVERSE_ROUNDED_CORNER",
              "NONE",
              "ROUNDED_CORNER"
            ]
          },
          "radius": {
            "$ref": "#/definitions/unit"
          }
        }
      },
      "lines": {
        "type": "object",
        "properties": {
          "weight": { "$ref": "#/definitions/unit" },
          "offset": { "$ref": "#/definitions/unit" }
        }
      }
    }
  },
  "properties": {
    "paragraphs": {
      "type": "object",
      "description": "Object containing paragraph styles. The key's name becomes the paragraph style's name.",
      "patternProperties": {
        "^[a-zA-Z0-9_.-]+$": {
          "type": "object",
          "properties": {
            "isSnippet": {
              "type": "boolean",
              "description": "If set to true, that block doesn't generate a new paragraph style but is available for later use it with \"useSnippet\" in another paragraph style."
            },
            "useSnippets": {
              "type": "array",
              "description": "Snippets to apply to the paragraph style. Can be used inside paragraph styles that are also snippets or specify non-snippet paragraph styles and it'll work as expected.\n\nIt uses no InDesign built-in inheritance but applies the properties directly.",
              "items": {
                "$ref": "#/definitions/id"
              }
            },
            "basedOn": {
              "$ref": "#/definitions/id",
              "description": "On which other paragraph style this one should be based. The input is the name of the target paragraph style.\n\nUses InDesign's built-in inheritance functionnality."
            },
            "nextStyle": {
              "$ref": "#/definitions/id",
              "description": "The style to apply to new paragraphs that follow paragraphs tagged with this style."
            },
            "display": {
              "type": "object",
              "properties": {
                "fill": {
                  "type": "object",
                  "properties": {
                    "color": {
                      "$ref": "#/definitions/color"
                    },
                    "overprint": {
                      "type": "boolean",
                      "default": false,
                      "description": "If true, the stroke of the characters will overprint."
                    },
                    "opacity": {
                      "type": "number",
                      "mininum": 0,
                      "maximum": 100,
                      "default": 100
                    }
                  }
                },
                "stroke": {
                  "type": "object",
                  "properties": {
                    "weight": {
                      "$ref": "#/definitions/unit"
                    },
                    "color": {
                      "$ref": "#/definitions/color"
                    },
                    "miterLimit": {
                      "type": "number",
                      "mininum": 0,
                      "maximum": 1000,
                      "description": "The limit of the ratio of stroke width to miter length before a miter (pointed) join becomes a bevel (squared-off) join."
                    },
                    "angles": {
                      "type": "string",
                      "enum": [
                        "BEVEL_END_JOIN",
                        "MITER_END_JOIN",
                        "ROUND_END_JOIN"
                      ]
                    },
                    "overprint": {
                      "type": "boolean",
                      "default": false,
                      "description": "If true, the stroke of the characters will overprint."
                    },
                    "alignment": {
                      "type": "string",
                      "enum": ["CENTER_ALIGNMENT", "OUTSIDE_ALIGNMENT"]
                    },
                    "opacity": {
                      "type": "number",
                      "mininum": 0,
                      "maximum": 100,
                      "default": 100
                    }
                  }
                },
                "strikeThrough": {
                  "anyOf": [
                    { "type": "boolean", "const": false },
                    {
                      "type": "object",
                      "properties": {
                        "weight": { "$ref": "#/definitions/unit" },
                        "offset": { "$ref": "#/definitions/unit" },
                        "color": { "$ref": "#/definitions/color" },
                        "overprint": {
                          "type": "boolean",
                          "default": false,
                          "description": "If true, the stroke of the characters will overprint."
                        },
                        "opacity": {
                          "type": "number",
                          "mininum": 0,
                          "maximum": 100,
                          "default": 100
                        },
                        "gapColor": { "$ref": "#/definitions/color" },
                        "gapOverprint": {
                          "type": "boolean",
                          "default": false,
                          "description": "If true, the stroke of the characters will overprint."
                        },
                        "gapOpacity": {
                          "type": "number",
                          "mininum": 0,
                          "maximum": 100,
                          "default": 100
                        },
                        "style": {
                          "type": "string",
                          "enum": [
                            "SOLID",
                            "THIN_THIN_THIN",
                            "THICK_THIN_THICK",
                            "THIN_THICK_THIN",
                            "THICK_THICK",
                            "THICK_THIN",
                            "THIN_THICK",
                            "THIN_THIN",
                            "DOTTED_DENSE",
                            "DOTTED_SPACED",
                            "DASHED_SHORT",
                            "DASHED_MEDIUM",
                            "DASHED_LONG",
                            "DIAMONDS",
                            "BACKWARD_DIAGONAL_HATCHING",
                            "FORWARD_DIAGONAL_HATCHING",
                            "VERTICAL_HATCHING",
                            "WAVE"
                          ]
                        }
                      }
                    }
                  ]
                },
                "underline": {
                  "anyOf": [
                    { "type": "boolean", "const": false },
                    {
                      "type": "object",
                      "properties": {
                        "weight": {
                          "$ref": "#/definitions/unit"
                        },
                        "offset": {
                          "$ref": "#/definitions/unit"
                        },
                        "color": {
                          "$ref": "#/definitions/color"
                        },
                        "overprint": {
                          "type": "boolean",
                          "default": false,
                          "description": "If true, the stroke of the characters will overprint."
                        },
                        "opacity": {
                          "type": "number",
                          "mininum": 0,
                          "maximum": 100,
                          "default": 100
                        },
                        "gapColor": {
                          "$ref": "#/definitions/color"
                        },
                        "gapOverprint": {
                          "type": "boolean",
                          "default": false,
                          "description": "If true, the stroke of the characters will overprint."
                        },
                        "gapOpacity": {
                          "type": "number",
                          "mininum": 0,
                          "maximum": 100,
                          "default": 100
                        },
                        "style": {
                          "type": "string",
                          "enum": [
                            "SOLID",
                            "THIN_THIN_THIN",
                            "THICK_THIN_THICK",
                            "THIN_THICK_THIN",
                            "THICK_THICK",
                            "THICK_THIN",
                            "THIN_THICK",
                            "THIN_THIN",
                            "DOTTED_DENSE",
                            "DOTTED_SPACED",
                            "DASHED_SHORT",
                            "DASHED_MEDIUM",
                            "DASHED_LONG",
                            "DIAMONDS",
                            "BACKWARD_DIAGONAL_HATCHING",
                            "FORWARD_DIAGONAL_HATCHING",
                            "VERTICAL_HATCHING",
                            "WAVE"
                          ]
                        }
                      }
                    }
                  ]
                }
              }
            },
            "text": {
              "type": "object",
              "description": "Configure text.",
              "properties": {
                "fontFamily": {
                  "type": "string"
                },
                "fontStyle": {
                  "type": "string"
                },
                "fontSize": {
                  "$ref": "#/definitions/unit"
                },
                "variable": {
                  "anyOf": [
                    {
                      "type": "boolean",
                      "enum": [false]
                    },
                    {
                      "type": "object",
                      "patternProperties": {
                        "^[a-zA-Z0-9_.-]+$": {
                          "not": "object"
                        }
                      },
                      "properties": {
                        "Weight": {
                          "type": "number"
                        },
                        "Width": {
                          "type": "number"
                        },
                        "Italic": {
                          "type": "number"
                        }
                      }
                    }
                  ]
                },
                "textTransform": {
                  "capitalization": {
                    "type": "string",
                    "enum": [
                      "SMALL_CAPS",
                      "NORMAL",
                      "CAP_TO_SMALL_CAP",
                      "ALL_CAPS"
                    ]
                  },
                  "horizontalScale": {
                    "type": "number",
                    "description": "The horizontal scaling applied to the glyphs."
                  },
                  "verticalScale": {
                    "type": "number",
                    "description": "The vertical scaling applied to the glyphs."
                  },
                  "skew": {
                    "type": "number",
                    "minimum": -85,
                    "maximum": 85,
                    "description": "Slant of the font in degrees."
                  },
                  "rotation": {
                    "type": "number",
                    "description": "A value in degrees in which to rotate characters. Applied individually for each glyph and unclock-wise."
                  }
                },
                "opentype": {
                  "type": "object",
                  "properties": {
                    "kerning": {
                      "anyOf": [
                        {
                          "type": "number",
                          "const": 0
                        },
                        {
                          "type": "string",
                          "enum": ["Optical", "Metrics"]
                        }
                      ]
                    },
                    "ligatures": {
                      "type": "boolean",
                      "description": "If true, replaces specific character combinations (e.g., fl, fi) with ligature characters."
                    },
                    "contextualAlternate": {
                      "type": "boolean",
                      "description": "If true, uses contextual alternate forms in OpenType fonts."
                    },
                    "discretionaryLigature": {
                      "type": "boolean",
                      "description": "If true, uses discretionary ligatures in OpenType fonts."
                    },
                    "figureStyle": {
                      "type": "string",
                      "enum": [
                        "DEFAULT_VALUE",
                        "PROPORTIONAL_LINING",
                        "PROPORTIONAL_OLDSTYLE",
                        "TABULAR_LINING",
                        "TABULAR_OLDSTYLE"
                      ],
                      "description": "The figure style in OpenType fonts."
                    },
                    "fraction": {
                      "type": "boolean",
                      "description": "If true, uses fractions in OpenType fonts."
                    },
                    "historical": {
                      "type": "boolean",
                      "description": "If true, use historical forms in OpenType fonts."
                    },
                    "justificationAlternate": {
                      "type": "boolean",
                      "description": "If true, use alternate justification forms in OpenType fonts"
                    },
                    "locale": {
                      "type": "boolean",
                      "description": "If true, uses localized forms in OpenType fonts."
                    },
                    "mark": {
                      "type": "boolean",
                      "description": "If true, uses mark positioning in OpenType fonts."
                    },
                    "ordinal": {
                      "type": "boolean",
                      "description": "If true, uses ordinals in OpenType fonts."
                    },
                    "overlapSwash": {
                      "type": "boolean",
                      "description": "If true, use overlapping swash forms in OpenType fonts"
                    },
                    "proportionalMetrics": {
                      "type": "boolean",
                      "description": "If true, kerns according to proportional CJK metrics in OpenType fonts."
                    },
                    "romanItalics": {
                      "type": "boolean",
                      "description": "If true, applies italics to half-width alphanumerics."
                    },
                    "slashedZero": {
                      "type": "boolean",
                      "description": "If true, use a slashed zeroes in OpenType fonts."
                    },
                    "stretchedAlternate": {
                      "type": "boolean",
                      "description": "If true, use stretched alternate forms in OpenType fonts"
                    },
                    "stylisticAlternate": {
                      "type": "boolean",
                      "description": "If true, use stylistic alternate forms in OpenType fonts"
                    },
                    "stylisticSets": {
                      "type": "array",
                      "description": "The stylistic sets to use in OpenType fonts.",
                      "minItems": 1,
                      "uniqueItems": true,
                      "items": {
                        "type": "number",
                        "minimum": 0,
                        "maximum": 20
                      }
                    },
                    "swash": {
                      "type": "boolean",
                      "description": "If true, uses swash forms in OpenType fonts."
                    },
                    "titling": {
                      "type": "boolean",
                      "description": "If true, uses titling forms in OpenType fonts."
                    },
                    "HVKana": {
                      "type": "boolean",
                      "description": "If true, switches hiragana fonts, which have different glyphs for horizontal and vertical."
                    }
                  }
                },
                "smallCharacterAlignment": {
                  "type": "string",
                  "description": "The alignment of small characters to the largest character in the line.",
                  "enum": [
                    "ALIGN_BASELINE",
                    "ALIGN_EM_BOTTOM",
                    "ALIGN_EM_CENTER",
                    "ALIGN_EM_TOP",
                    "ALIGN_ICF_BOTTOM",
                    "ALIGN_ICF_TOP"
                  ]
                },
                "characterDirection": {
                  "type": "string",
                  "enum": [
                    "DEFAULT_DIRECTION",
                    "LEFT_TO_RIGHT_DIRECTION",
                    "RIGHT_TO_LEFT_DIRECTION"
                  ]
                },
                "numbers": {
                  "type": "object",
                  "properties": {}
                },
                "baseLineShift": {
                  "$ref": "#/definitions/unit"
                },
                "dropCap": {
                  "type": "object",
                  "properties": {
                    "characters": {
                      "type": "number",
                      "description": "The number of characters to drop cap.",
                      "minimum": 0,
                      "maximum": 150
                    },
                    "lines": {
                      "type": "number",
                      "description": "The number of lines to drop cap.",
                      "minimum": 0,
                      "maximum": 25
                    },
                    "characterStyle": {
                      "$ref": "#/definitions/id",
                      "description": "A character style ID to apply to the drop cap."
                    },
                    "detail": {
                      "type": "string",
                      "description": "Drop cap's details.",
                      "enum": [
                        "ALIGN_TO_LEFT",
                        "ADJUST_DESCENDERS",
                        "ALIGN_TO_LEFT_AND_ADJUST_DESCENDERS",
                        "NONE"
                      ]
                    }
                  }
                },
                "colors": {
                  "type": "object",
                  "properties": {
                    "fill": {
                      "type": "object",
                      "properties": {
                        "color": {
                          "type": "string"
                        },
                        "opacity": {
                          "type": "number",
                          "minimum": 0,
                          "maximum": 100
                        }
                      }
                    }
                  }
                }
              }
            },
            "composition": {
              "type": "object",
              "properties": {
                "noBreak": {
                  "type": "boolean",
                  "description": "If true, disables ALL automatic line breaks."
                },
                "justification": {
                  "type": "string",
                  "enum": [
                    "AWAY_FROM_BINDING_SIDE",
                    "CENTER_ALIGN",
                    "CENTER_JUSTIFIED",
                    "FULLY_JUSTIFIED",
                    "LEFT_ALIGN",
                    "LEFT_JUSTIFIED",
                    "RIGHT_ALIGN",
                    "RIGHT_JUSTIFIED",
                    "TO_BINDING_SIDE"
                  ]
                },
                "paragraphBreak": {
                  "type": "object",
                  "properties": {
                    "keepLinesTogether": {
                      "description": "If set, keeps a specified number of lines together when the paragraph breaks across columns or text frames.",
                      "anyOf": [
                        {
                          "type": "boolean",
                          "const": false
                        },
                        {
                          "type": "object",
                          "properties": {
                            "keepFirstLines": {
                              "type": "number",
                              "description": "The minimum number of lines to keep together in a paragraph before allowing a page break.",
                              "minimum": 1,
                              "maximum": 50
                            },
                            "keepLastLines": {
                              "type": "number",
                              "description": "The minimum number of lines to keep together in a paragraph after a page break.",
                              "minimum": 1,
                              "maximum": 50
                            },
                            "keepWithNext": {
                              "type": "number",
                              "description": "The minimum number of lines to keep with the next paragraph.",
                              "minimum": 0,
                              "maximum": 5
                            },
                            "keepWithPrevious": {
                              "type": "boolean",
                              "description": "If the first line in the paragraph should be kept with the last line of previous paragraph."
                            }
                          }
                        }
                      ]
                    },
                    "keepAllLinesTogether": {
                      "type": "boolean",
                      "description": "If true, keeps all lines of the paragraph together. If false, allows paragraphs to break across pages or columns."
                    }
                  }
                },
                "indents": {
                  "type": "object",
                  "properties": {
                    "firstLineIndent": {
                      "$ref": "#/definitions/unit",
                      "description": "The width in unit to indent the first line."
                    },
                    "lastLineIndent": {
                      "$ref": "#/definitions/unit",
                      "description": "The width in unit to indent the last line."
                    },
                    "leftIndent": {
                      "$ref": "#/definitions/unit",
                      "description": "The width of the left indent."
                    }
                  }
                },
                "ignoreEdgeAlignment": {
                  "type": "boolean",
                  "description": "If true, ignores optical edge alignment for the paragraph."
                },
                "singleWordJustification": {
                  "type": "string",
                  "enum": [
                    "CENTER_ALIGN",
                    "FULLY_JUSTIFIED",
                    "LEFT_ALIGN",
                    "RIGHT_ALIGN"
                  ]
                },
                "hyphenation": {
                  "anyOf": [
                    {
                      "type": "boolean",
                      "const": false,
                      "description": "Disables hyphenation."
                    },
                    {
                      "type": "object",
                      "properties": {
                        "hyphenWeight": {
                          "type": "number",
                          "description": "The relative desirability of better spacing over fewer hyphens. A lower value results in greater use of hyphens.",
                          "minimum": 0,
                          "maximum": 10
                        },
                        "hyphenateAcrossColumns": {
                          "type": "boolean",
                          "description": "If true, allows the last word in a text column to be hyphenated."
                        },
                        "hyphenateAfterFirst": {
                          "type": "number",
                          "description": "The mininum number of letters at the beginning of a word that can be broken by a hyphen.",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "hyphenateBeforeLast": {
                          "type": "number",
                          "description": "The minimum number of letters at the end of a word that can be broken by a hyphen.",
                          "minimum": 1,
                          "maximum": 15
                        },
                        "hyphenateLadderLimit": {
                          "type": "number",
                          "description": "The maximum number of hyphens that can appear on consecutive lines. To specify unlimited consecutive lines, use zero.",
                          "minimum": 0,
                          "maximum": 25
                        },
                        "hyphenateLastWord": {
                          "type": "boolean",
                          "description": "If true, allows hyphenation in the last word in a paragraph."
                        },
                        "allowArbitraryHyphenation": {
                          "type": "boolean",
                          "description": "If true, words unassociated with a hyphenation dictionary can break to the next line on any character."
                        },
                        "hyphenationZone": {
                          "$ref": "#/definitions/unit",
                          "description": "The amount of white space allowed at the end of a line of non-justified text before hypenation begins."
                        }
                      }
                    }
                  ]
                },
                "balanceRaggedLines": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "FULLY_BALANCED",
                        "NO_BALANCING",
                        "PYRAMID_SHAPE",
                        "VEE_SHAPE"
                      ]
                    },
                    {
                      "type": "boolean",
                      "const": false
                    }
                  ]
                },
                "justificationScaling": {
                  "type": "object",
                  "definition": "Glyph scaling, word spacing and letter spacing preferences.",
                  "properties": {
                    "glyphScaling": {
                      "type": "object",
                      "properties": {
                        "minimum": {
                          "type": "number",
                          "default": 95,
                          "description": "The minimum width (%) of individual characters.",
                          "minimum": 50,
                          "maximum": 200
                        },
                        "desired": {
                          "type": "number",
                          "default": 100,
                          "description": "The desired width (%) of individual characters.",
                          "minimum": 50,
                          "maximum": 200
                        },
                        "maximum": {
                          "type": "number",
                          "default": 105,
                          "description": "The maximum width (%) of individual characters.",
                          "minimum": 50,
                          "maximum": 200
                        }
                      }
                    },
                    "letterSpacing": {
                      "type": "object",
                      "properties": {
                        "minimum": {
                          "type": "number",
                          "default": 95,
                          "description": "The minimum letter spacing (%) of the built-in space between letters in the font.",
                          "minimum": -100,
                          "maximum": 500
                        },
                        "desired": {
                          "type": "number",
                          "default": 100,
                          "description": "The desired letter spacing (%) of the built-in space between letters in the font.",
                          "minimum": -100,
                          "maximum": 500
                        },
                        "maximum": {
                          "type": "number",
                          "default": 105,
                          "description": "The maximum letter spacing (%) of the built-in space between letters in the font.",
                          "minimum": -100,
                          "maximum": 500
                        }
                      }
                    },
                    "wordSpacing": {
                      "type": "object",
                      "properties": {
                        "minimum": {
                          "type": "number",
                          "default": 80,
                          "description": "The minimum word spacing (%) of the font word space value.",
                          "minimum": 0,
                          "maximum": 1000
                        },
                        "desired": {
                          "type": "number",
                          "default": 100,
                          "description": "The desired word spacing (%) of the font word space value.",
                          "minimum": 0,
                          "maximum": 1000
                        },
                        "maximum": {
                          "type": "number",
                          "default": 120,
                          "description": "The maximum word spacing (%) of the font word space value.",
                          "minimum": 0,
                          "maximum": 1000
                        }
                      }
                    }
                  }
                },
                "language": {
                  "type": "string",
                  "enum": [
                    "French",
                    "French: Canadian",
                    "German: Traditional",
                    "German: Reformed",
                    "German: Swiss",
                    "German: Austrian",
                    "Italian",
                    "English: UK",
                    "English: Canadian",
                    "English: USA",
                    "English: USA Medical",
                    "English: USA Legal",
                    "Spanish: Castilian",
                    "Portuguese",
                    "Portuguese: Brazilian",
                    "Portuguese: Orthographic Agreement",
                    "Arabic",
                    "Bulgarian",
                    "Catalan",
                    "Croatian",
                    "Czech",
                    "Danish",
                    "Dutch",
                    "Estonian",
                    "Finnish",
                    "Greek",
                    "Hebrew",
                    "Hungarian",
                    "Lithuanian",
                    "Latvian",
                    "Norwegian: Bokmal",
                    "Norwegian: Nynorsk",
                    "Polish",
                    "Romanian",
                    "Russian",
                    "Slovak",
                    "Slovenian",
                    "Swedish",
                    "Thai",
                    "Turkish",
                    "Ukrainian"
                  ]
                }
              }
            },
            "list": {
              "anyOf": [
                {
                  "type": "boolean",
                  "const": false
                },
                {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "List type, bulleted or numbered.",
                      "enum": ["NUMBERED_LIST", "BULLET_LIST"]
                    },
                    "alignment": {
                      "type": "string",
                      "enum": ["CENTER_ALIGN", "LEFT_ALIGN", "RIGHT_ALIGN"]
                    },
                    "bulletList": {
                      "type": "object",
                      "properties": {
                        "bulletChar": {
                          "type": "string"
                        },
                        "characterStyle": {
                          "$ref": "#/definitions/id",
                          "description": "A character style ID to apply to the bullets."
                        }
                      }
                    },
                    "numberedList": {
                      "properties": {
                        "startAt": {
                          "type": "number"
                        },
                        "numberingFormat": {
                          "type": "string",
                          "enum": [
                            "ARABIC",
                            "ARABIC_ABJAD",
                            "ARABIC_ALIF_BA_TAH",
                            "DOUBLE_LEADING_ZEROS",
                            "FORMAT_NONE",
                            "HEBREW_BIBLICAL",
                            "HEBREW_NON_STANDARD",
                            "KANJI",
                            "KATAKANA_MODERN",
                            "KATAKANA_TRADITIONAL",
                            "LOWER_LETTERS",
                            "LOWER_ROMAN",
                            "SINGLE_LEADING_ZEROS",
                            "TRIPLE_LEADING_ZEROS",
                            "UPPER_LETTERS",
                            "UPPER_ROMAN"
                          ]
                        },
                        "characterStyle": {
                          "$ref": "#/definitions/id",
                          "description": "A character style ID to apply to the numbers."
                        },
                        "numberingExpression": {
                          "type": "string",
                          "definition": "The number string expression (format) for numbering."
                        }
                      }
                    }
                  }
                }
              ]
            },
            "grid": {
              "type": "object",
              "properties": {
                "alignToBaseline": {
                  "type": "boolean"
                },
                "alignFirstLineOnly": {
                  "type": "boolean"
                },
                "alignmentType": {
                  "anyOf": [
                    {
                      "type": "string",
                      "enum": [
                        "ALIGN_BASELINE",
                        "ALIGN_EM_BOTTOM",
                        "ALIGN_EM_CENTER",
                        "ALIGN_EM_TOP",
                        "ALIGN_ICF_BOTTOM",
                        "ALIGN_ICF_TOP"
                      ]
                    }
                  ]
                }
              }
            },
            "layout": {
              "type": "object",
              "properties": {
                "borders": {
                  "type": "object",
                  "properties": {
                    "color": { "$ref": "#/definitions/color" },
                    "gapColor": { "$ref": "#/definitions/color" },
                    "overprint": { "type": "boolean", "default": false },
                    "gapOverprint": { "type": "boolean", "default": false },
                    "opacity": {
                      "type": "number",
                      "mininum": 0,
                      "maximum": 100
                    },
                    "gapOpacity": {
                      "type": "number",
                      "mininum": 0,
                      "maximum": 100
                    },
                    "displayIfSplits": {
                      "type": "boolean",
                      "description": "If the paragraph is split across multiple blocks, whether to display the border at those breakpoints."
                    },
                    "width": {
                      "type": "string",
                      "description": "The basis used to calculate the width of the paragraph border.",
                      "enum": ["COLUMN_WIDTH", "TEXT_WIDTH"]
                    },
                    "endCap": {
                      "type": "string",
                      "description": "The end shape of an open path.",
                      "enum": [
                        "BUTT_END_CAP",
                        "PROJECTING_END_CAP",
                        "ROUND_END_CAP"
                      ]
                    },
                    "endJoin": {
                      "type": "string",
                      "description": "The corner join applied to the paragraph style.",
                      "enum": [
                        "BEVEL_END_JOIN",
                        "MITER_END_JOIN",
                        "ROUND_END_JOIN"
                      ]
                    },
                    "style": {
                      "type": "string",
                      "enum": [
                        "SOLID",
                        "THIN_THIN_THIN",
                        "THICK_THIN_THICK",
                        "THIN_THICK_THIN",
                        "THICK_THICK",
                        "THICK_THIN",
                        "THIN_THICK",
                        "THIN_THIN",
                        "DOTTED_DENSE",
                        "DOTTED_SPACED",
                        "DASHED_SHORT",
                        "DASHED_MEDIUM",
                        "DASHED_LONG",
                        "DIAMONDS",
                        "BACKWARD_DIAGONAL_HATCHING",
                        "FORWARD_DIAGONAL_HATCHING",
                        "VERTICAL_HATCHING",
                        "WAVE"
                      ]
                    },
                    "borderTop": {
                      "type": "object",
                      "properties": {
                        "weight": { "$ref": "#/definitions/unit" },
                        "offset": { "$ref": "#/definitions/unit" },
                        "origin": {
                          "type": "string",
                          "enum": [
                            "ASCENT_TOP_ORIGIN",
                            "BASELINE_TOP_ORIGIN",
                            "LEADING_TOP_ORIGIN"
                          ]
                        }
                      }
                    },
                    "borderRight": {
                      "type": "object",
                      "properties": {
                        "weight": { "$ref": "#/definitions/unit" },
                        "offset": { "$ref": "#/definitions/unit" }
                      }
                    },
                    "borderBottom": {
                      "type": "object",
                      "properties": {
                        "weight": { "$ref": "#/definitions/unit" },
                        "offset": { "$ref": "#/definitions/unit" },
                        "origin": {
                          "type": "string",
                          "enum": [
                            "BASELINE_BOTTOM_ORIGIN",
                            "DESCENT_BOTTOM_ORIGIN"
                          ]
                        }
                      }
                    },
                    "borderLeft": {
                      "type": "object",
                      "properties": {
                        "weight": { "$ref": "#/definitions/unit" },
                        "offset": { "$ref": "#/definitions/unit" }
                      }
                    },
                    "corners": {
                      "type": "object",
                      "properties": {
                        "topRight": {
                          "$ref": "#/definitions/layout/corners"
                        },
                        "topLeft": {
                          "$ref": "#/definitions/layout/corners"
                        },
                        "bottomRight": {
                          "$ref": "#/definitions/layout/corners"
                        },
                        "bottomLeft": {
                          "$ref": "#/definitions/layout/corners"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "": "",
  " ": "",
  "  ": "",
  "   ": "",
  "    ": "",
  "     ": "",
  "      ": "",
  "       ": "",
  "        ": "",
  "         ": "",
  "all": [
    "endJoin",
    "OutlineJoin.BEVEL_END_JOIN",
    "OutlineJoin.MITER_END_JOIN",
    "OutlineJoin.ROUND_END_JOIN",

    "gradientFillAngle",
    "gradientFillLength",
    "gradientFillStart",
    "gradientStrokeAngle",
    "gradientStrokeLength",
    "gradientStrokeStart",
    "mergeConsecutiveParaBorders",
    "numberingApplyRestartPolicy",
    "numberingCharacterStyle",
    "numberingContinue",
    "numberingLevel",
    "numberingRestartPolicies",
    "numberingStartAt",

    "paragraphDirection",
    "ParagraphDirectionOptions.LEFT_TO_RIGHT_DIRECTION",
    "ParagraphDirectionOptions.RIGHT_TO_LEFT_DIRECTION",
    "paragraphGyoudori",
    "paragraphJustification",
    "ParagraphJustificationOptions.ARABIC_JUSTIFICATION",
    "ParagraphJustificationOptions.DEFAULT_JUSTIFICATION",
    "ParagraphJustificationOptions.NASKH_JUSTIFICATION",
    "ParagraphJustificationOptions.NASKH_KASHIDA_JUSTIFICATION",
    "ParagraphJustificationOptions.NASKH_KASHIDA_JUSTIFICATION_FRAC",
    "ParagraphJustificationOptions.NASKH_TATWEEL_JUSTIFICATION",
    "ParagraphJustificationOptions.NASKH_TATWEEL_JUSTIFICATION_FRAC",
    "paragraphKashidaWidth",
    "paragraphShadingBottomLeftCornerOption",
    "CornerOptions.BEVEL_CORNER",
    "CornerOptions.FANCY_CORNER",
    "CornerOptions.INSET_CORNER",
    "CornerOptions.INVERSE_ROUNDED_CORNER",
    "CornerOptions.NONE",
    "CornerOptions.ROUNDED_CORNER",
    "paragraphShadingBottomLeftCornerRadius",
    "paragraphShadingBottomOffset",
    "paragraphShadingBottomOrigin",
    "ParagraphShadingBottomOriginEnum.BASELINE_BOTTOM_ORIGIN",
    "ParagraphShadingBottomOriginEnum.DESCENT_BOTTOM_ORIGIN",
    "paragraphShadingBottomRightCornerOption",
    "CornerOptions.BEVEL_CORNER",
    "CornerOptions.FANCY_CORNER",
    "CornerOptions.INSET_CORNER",
    "CornerOptions.INVERSE_ROUNDED_CORNER",
    "CornerOptions.NONE",
    "CornerOptions.ROUNDED_CORNER",
    "paragraphShadingBottomRightCornerRadius",
    "paragraphShadingClipToFrame",
    "paragraphShadingColor",
    "paragraphShadingLeftOffset",
    "paragraphShadingOn",
    "paragraphShadingOverprint",
    "paragraphShadingRightOffset",
    "paragraphShadingSuppressPrinting",
    "paragraphShadingTint",
    "paragraphShadingTopLeftCornerOption",
    "CornerOptions.BEVEL_CORNER",
    "CornerOptions.FANCY_CORNER",
    "CornerOptions.INSET_CORNER",
    "CornerOptions.INVERSE_ROUNDED_CORNER",
    "CornerOptions.NONE",
    "CornerOptions.ROUNDED_CORNER",
    "paragraphShadingTopLeftCornerRadius",
    "paragraphShadingTopOffset",
    "paragraphShadingTopOrigin",
    "ParagraphShadingTopOriginEnum.ASCENT_TOP_ORIGIN",
    "ParagraphShadingTopOriginEnum.BASELINE_TOP_ORIGIN",
    "ParagraphShadingTopOriginEnum.LEADING_TOP_ORIGIN",
    "paragraphShadingTopRightCornerOption",
    "CornerOptions.BEVEL_CORNER",
    "CornerOptions.FANCY_CORNER",
    "CornerOptions.INSET_CORNER",
    "CornerOptions.INVERSE_ROUNDED_CORNER",
    "CornerOptions.NONE",
    "CornerOptions.ROUNDED_CORNER",
    "paragraphShadingTopRightCornerRadius",
    "paragraphShadingWidth",
    "ParagraphShadingWidthEnum.COLUMN_WIDTH",
    "ParagraphShadingWidthEnum.TEXT_WIDTH",
    "parent",
    "pointSize",
    "position",
    "Position.NORMAL",
    "Position.OT_DENOMINATOR",
    "Position.OT_NUMERATOR",
    "Position.OT_SUBSCRIPT",
    "Position.OT_SUPERSCRIPT",
    "Position.SUBSCRIPT",
    "Position.SUPERSCRIPT",
    "positionalForm",
    "PositionalForms.CALCULATE",
    "PositionalForms.FINAL",
    "PositionalForms.INITIAL",
    "PositionalForms.ISOLATED",
    "PositionalForms.MEDIAL",
    "PositionalForms.NONE",
    "preferences",
    "previewColor",
    "NothingEnum.NOTHING",
    "properties",
    "providerHyphenationStyle",
    "HyphenationStyleEnum.HYPH_AESTHETIC",
    "HyphenationStyleEnum.HYPH_ALL",
    "HyphenationStyleEnum.HYPH_ALL_BUT_UNAESTHETIC",
    "HyphenationStyleEnum.HYPH_PREFERRED_AESTHETIC",
    "rightIndent",
    "rotateSingleByteCharacters",
    "AdornmentOverprint.AUTO",
    "AdornmentOverprint.OVERPRINT_OFF",
    "AdornmentOverprint.OVERPRINT_ON",
    "AdornmentOverprint.AUTO",
    "AdornmentOverprint.OVERPRINT_OFF",
    "AdornmentOverprint.OVERPRINT_ON",
    "ruleAbove",
    "ruleAboveColor",
    "ruleAboveGapColor",
    "ruleAboveGapOverprint",
    "ruleAboveGapTint",
    "ruleAboveLeftIndent",
    "ruleAboveLineWeight",
    "ruleAboveOffset",
    "ruleAboveOverprint",
    "ruleAboveRightIndent",
    "ruleAboveTint",
    "ruleAboveType",
    "ruleAboveWidth",
    "RuleWidth.COLUMN_WIDTH",
    "RuleWidth.TEXT_WIDTH",
    "ruleBelow",
    "ruleBelowColor",
    "ruleBelowGapColor",
    "ruleBelowGapOverprint",
    "ruleBelowGapTint",
    "ruleBelowLeftIndent",
    "ruleBelowLineWeight",
    "ruleBelowOffset",
    "ruleBelowOverprint",
    "ruleBelowRightIndent",
    "ruleBelowTint",
    "ruleBelowType",
    "ruleBelowWidth",
    "RuleWidth.COLUMN_WIDTH",
    "RuleWidth.TEXT_WIDTH",
    "sameParaStyleSpacing",
    "Spacing.SETIGNORE",
    "scaleAffectsLineHeight",
    "singleWordJustification",
    "SingleWordJustification.CENTER_ALIGN",
    "SingleWordJustification.FULLY_JUSTIFIED",
    "SingleWordJustification.LEFT_ALIGN",
    "SingleWordJustification.RIGHT_ALIGN",
    "spaceAfter",
    "spaceBefore",
    "spanColumnMinSpaceAfter",
    "spanColumnMinSpaceBefore",
    "spanColumnType",
    "SpanColumnTypeOptions.SINGLE_COLUMN",
    "SpanColumnTypeOptions.SPAN_COLUMNS",
    "SpanColumnTypeOptions.SPLIT_COLUMNS",
    "spanSplitColumnCount",
    "SpanColumnCountOptions.ALL",
    "splitColumnInsideGutter",
    "splitColumnOutsideGutter",
    "splitDocument",
    "startParagraph",
    "StartParagraph.ANYWHERE",
    "StartParagraph.NEXT_COLUMN",
    "StartParagraph.NEXT_EVEN_PAGE",
    "StartParagraph.NEXT_FRAME",
    "StartParagraph.NEXT_ODD_PAGE",
    "StartParagraph.NEXT_PAGE",
    "styleExportTagMaps",
    "styleUniqueId",
    "tabList",
    "tabStops",
    "tracking",
    "xOffsetDiacritic",
    "yOffsetDiacritic",
    "extractLabel",
    "isNthDesignAxisHidden",
    "setNthDesignAxis"
  ]
}
